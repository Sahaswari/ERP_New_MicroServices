@using ERP_WorkLoadManagement.DTOs.Works.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@inject ISnackbar Snackbar



<MudContainer>
    <h3 class="text-center mb-4">New Work Create</h3>

    <MudCard>
        <MudCardContent>
            <MudForm Model="@model" @ref="@form"
                     Validation="@(workValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.WorkName"
                                      Label="New Work Name"
                                      Required="true"
                                      For="@(()=>model.WorkName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="New Work Type" @bind-Value="@model.WorkType">
                            @foreach (var option in workTypeList)
                            {
                                <MudSelectItem Value="option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       OnClick="@(async () => await Submit())">Add</MudButton>
        </MudCardActions>

    </MudCard>
</MudContainer>




@code {

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateWorkRequest model = new CreateWorkRequest();

    WorkModelValidator workValidator = new WorkModelValidator();
    MudForm form;

    public class WorkModelValidator : AbstractValidator<CreateWorkRequest>
    {
        public WorkModelValidator()
        {
            RuleFor(x => x.WorkName)
                .NotEmpty().WithMessage("Work Name is Required.");


            RuleFor(x => x.WorkType)
                .NotEmpty().WithMessage("Work Type is Required.");

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateWorkRequest>
                .CreateWithOptions((CreateWorkRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                // var jsonmodel = jsonserializer.serialize(model);
                // var content = new stringcontent(jsonmodel, encoding.utf8, "application/json");
                // var response = await http.postasync("https://localhost:7010/api/graduates", content);

                // if (response.issuccessstatuscode)
                // {
                //     await onadded.invokeasync();
                //     form.reset();
                //     snackbar.add("graduate added successfully", mudblazor.severity.success);
                // }
                // else
                // {
                //     snackbar.add("please check your connection.", mudblazor.severity.error);
                // }


            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
    }


    private List<string> workTypeList = new List<string> { "Module Coordinator", "New Position", "Other" };

}
